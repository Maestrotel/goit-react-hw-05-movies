{"version":3,"file":"static/js/524.a49cfd09.chunk.js","mappings":"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","sources":["pages/DetailsMoviePage/DetailsMoviePage.jsx","services/api.js"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport React, { useEffect, useState, Suspense, lazy } from 'react';\nimport { Link, Route, Routes, useParams, useLocation } from 'react-router-dom';\nimport { getFilmDetails } from 'services/api';\n\nconst CastPage = lazy(() => import('pages/CastPage/CastPage'));\nconst ReviewsPage = lazy(() => import('pages/ReviewsPage/ReviewsPage'));\n\nfunction DetailsMoviePage() {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchFilmDetails = async id => {\n      try {\n        setIsLoading(true);\n        const trending = await getFilmDetails(id);\n        setMovieInfo(trending);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchFilmDetails(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      <Link to={location?.state?.from ?? '/'}>Go Back</Link>\n      {error !== null && <p>Something went wrong {error}</p>}\n      {isLoading && <Loader />}\n      <div>\n        {movieInfo && (\n          <div>\n            <div>\n              <img\n                src={\n                  movieInfo?.poster_path\n                    ? `https://image.tmdb.org/t/p/w500${movieInfo?.poster_path}`\n                    : 'https://cdn4.iconfinder.com/data/icons/ui-beast-4/32/Ui-12-512.png'\n                }\n                alt={movieInfo?.title}\n              />\n            </div>\n            <div>\n              <h1>\n                {movieInfo?.title} ({movieInfo?.release_date.slice(0, 4)})\n              </h1>\n              <p>User Score: {movieInfo?.vote_average}</p>\n              <h2>Overview</h2>\n              <p>{movieInfo?.overview}</p>\n              <h2>Genres</h2>\n              <ul>\n                {movieInfo?.genres?.map(({ id, name }) => {\n                  return <li key={id}>{name}</li>;\n                })}\n              </ul>\n            </div>\n          </div>\n        )}\n        <h2>Additional information</h2>\n        <Link state={{ from: location?.state?.from ?? '/' }} to=\"cast\">\n          Cast\n        </Link>\n        <Link state={{ from: location?.state?.from ?? '/' }} to=\"reviews\">\n          Reviews\n        </Link>\n        <Suspense fallback={<Loader />}>\n          <Routes>\n            <Route path=\"cast\" element={<CastPage />} />\n            <Route path=\"reviews\" element={<ReviewsPage />} />\n          </Routes>\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n\nexport default DetailsMoviePage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '4f78e0fa15d03d6a74908fc8e459b884';\n\nconst filmsAPI = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: KEY,\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await filmsAPI.get('/trending/movie/week');\n  return data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await filmsAPI.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const getFilmDetails = async id => {\n  const { data } = await filmsAPI.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await filmsAPI.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await filmsAPI.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["CastPage","lazy","ReviewsPage","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","movieId","useParams","location","useLocation","useEffect","fetchFilmDetails","id","getFilmDetails","trending","message","to","state","from","src","poster_path","alt","title","release_date","slice","vote_average","overview","genres","map","name","Suspense","fallback","path","element","filmsAPI","axios","baseURL","params","api_key","language","include_adult","getTrendingMovies","get","data","results","getMoviesByQuery","query","getCast","cast","getReviews"],"sourceRoot":""}