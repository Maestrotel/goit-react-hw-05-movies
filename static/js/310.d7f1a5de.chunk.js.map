{"version":3,"file":"static/js/310.d7f1a5de.chunk.js","mappings":"kMACA,EAA4B,6B,SCyB5B,MArBA,YAAuC,IAAlBA,EAAiB,EAAjBA,cACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGC,MAAMC,QAAQJ,IACbA,EAAcK,KAAI,SAAAC,GAChB,OACE,SAAC,KAAD,CACEC,MAAO,CAAEC,KAAMP,GAEfQ,UAAWC,EACXC,GAAE,kBAAaL,EAAEM,IAJnB,UAME,wBAAKN,EAAEO,MAAQP,EAAEQ,SAJZR,EAAEM,GAOZ,KAGR,C,0HC8BD,UAhDA,WACE,OAA0BG,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SAwB/B,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAI,OAACF,QAAD,IAACA,GAAAA,EAAOG,OAAZ,CACA,IAAMC,EAAW,mCAAG,WAAMJ,GAAN,uFAEhBN,GAAa,GAFG,UAGYW,EAAAA,EAAAA,IAAiBL,GAH7B,OAGVM,EAHU,OAIhBd,EAASc,GAJO,gDAMhBV,EAAS,KAAMW,SANC,yBAQhBb,GAAa,GARG,4EAAH,sDAWjBU,EAAYJ,EAZc,CAa3B,GAAE,CAACA,KASF,2BACa,OAAVL,IAAkB,iDAAyBA,KAC3CF,IAAa,SAAC,IAAD,KACd,kBAAMe,SAVW,SAAAC,GACnBA,EAAEC,iBACFX,EAAgB,CAAEC,MAAOS,EAAEE,cAAcC,OAAOC,QAChDJ,EAAEK,OAAOC,OACV,EAMG,WACE,kBACE3B,KAAK,SACL4B,KAAK,OACLC,aAAa,SAIf,mBAAQD,KAAK,SAAb,wBAEF,SAAC,IAAD,CAAWzC,cAAegB,MAG/B,C,sLC/CK2B,E,OAAWC,EAAAA,OAAa,CAC5BC,QAJe,+BAKfC,OAAQ,CACNC,QALQ,mCAMRC,SAAU,QACVC,eAAe,KAINC,EAAiB,mCAAG,sGACRP,EAASjB,IAAI,wBADL,uBACvByB,EADuB,EACvBA,KADuB,kBAExBA,EAAKC,SAFmB,2CAAH,qDAKjBtB,EAAgB,mCAAG,WAAML,GAAN,yFACPkB,EAASjB,IAAI,gBAAiB,CACnDoB,OAAQ,CAAErB,MAAAA,KAFkB,uBACtB0B,EADsB,EACtBA,KADsB,kBAIvBA,EAAKC,SAJkB,2CAAH,sDAOhBC,EAAc,mCAAG,WAAMzC,GAAN,yFACL+B,EAASjB,IAAT,iBAAuBd,IADlB,uBACpBuC,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdG,EAAO,mCAAG,WAAM1C,GAAN,yFACE+B,EAASjB,IAAT,iBAAuBd,EAAvB,aADF,uBACbuC,EADa,EACbA,KADa,kBAEdA,EAAKI,MAFS,2CAAH,sDAKPC,EAAU,mCAAG,WAAM5C,GAAN,yFACD+B,EAASjB,IAAT,iBAAuBd,EAAvB,aADC,uBAChBuC,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","pages/MoviePage/MoviePage.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"linkStyle\":\"MovieList_linkStyle__TSwN3\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MovieList.module.css';\n\nfunction MovieList({ moviesRoaster }) {\n  const location = useLocation();\n  return (\n    <ul>\n      {Array.isArray(moviesRoaster) &&\n        moviesRoaster.map(f => {\n          return (\n            <Link\n              state={{ from: location }}\n              key={f.id}\n              className={css.linkStyle}\n              to={`/movies/${f.id}`}\n            >\n              <h2>{f.name || f.title}</h2>\n            </Link>\n          );\n        })}\n    </ul>\n  );\n}\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  moviesRoaster: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import Loader from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\nimport { useEffect, useState } from 'react';\nimport { getMoviesByQuery } from 'services/api';\nimport { useSearchParams } from 'react-router-dom';\n\nfunction MoviePage() {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query?.trim()) return;\n    const fetchTrends = async query => {\n      try {\n        setIsLoading(true);\n        const receivedFilms = await getMoviesByQuery(query);\n        setFilms(receivedFilms);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrends(query);\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: e.currentTarget.search.value });\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      {error !== null && <p>Something went wrong {error}</p>}\n      {isLoading && <Loader />}\n      <form onSubmit={handleSubmit}>\n        <input\n          name=\"search\"\n          type=\"text\"\n          autoComplete=\"off\"\n          // value={searchQuery}\n          // onChange={handleInput}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <MovieList moviesRoaster={films} />\n    </div>\n  );\n}\n\nexport default MoviePage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '4f78e0fa15d03d6a74908fc8e459b884';\n\nconst filmsAPI = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: KEY,\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await filmsAPI.get('/trending/movie/week');\n  return data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await filmsAPI.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const getFilmDetails = async id => {\n  const { data } = await filmsAPI.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await filmsAPI.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await filmsAPI.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["moviesRoaster","location","useLocation","Array","isArray","map","f","state","from","className","css","to","id","name","title","useState","films","setFilms","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","trim","fetchTrends","getMoviesByQuery","receivedFilms","message","onSubmit","e","preventDefault","currentTarget","search","value","target","reset","type","autoComplete","filmsAPI","axios","baseURL","params","api_key","language","include_adult","getTrendingMovies","data","results","getFilmDetails","getCast","cast","getReviews"],"sourceRoot":""}